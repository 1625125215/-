
【需求一、把一个文件夹中所有子文件夹下的文件移动到指定的文件夹中】

import os
import shutil
原路径=''
新路径=''
for root,dirs,files in os.walk(原路径):
    for file in files:
        shutil.copy(os.path.join(root,file),新路径)
        
//其中第一个为起始路径，
第二个为起始路径下的文件夹,
第三个是起始路径下的文件.
dirpath是一个string，代表目录的路径,
dirnames是一个list，包含了dirpath下所有子目录的名字,
filenames是一个list，包含了非目录文件的名字.这些名字不包含路径信息,如果需要得到全路径,需要使用 os.path.join(dirpath, name).
-----------------------------------------------------------
【需求二、 判断路径是否存在+创建单层文件夹】
import os
#创建单层目录
def 创建文件夹(路径):
    #basename:返回目录路径中的最后一个元素
    目录名称=os.path.basename(路径)
    
    #判断路径是否存在
    是否存在=os.path.exists(路径)
    
    #如果不存在，创建单层目录
    if not 是否存在:
        os.mkdir(路径)
        print('目录创建成功：'+目录名称)
        return True
    
    #如果存在，则不创建单层目录，且提示
    else:
        print('目录已经存在：'+目录名称)
        return False
        
#确保仅有本程序调用
if __name__ == '__main__':
    创建文件夹('/Users/lifan/PycharmProjects/untitled3/创建文件夹的模块’)
-----------------------------------------------------------
【需求三：创建多层文件夹（包含验证是否已经存在路径）】
#创建多层目录模板
import os
def 创建多层文件(路径):
    if not os.path.exists(路径):
        os.makedirs(路径)
        print('目录创建成功：'+路径)
        return True
    else:
        print(' 目录已经存在。’)
        return False

if __name__=='__main__':
    创建多层文件('/Users/lifan/PycharmProjects/untitled3/9999999’)
因此if __name__ == 'main': 的作用就是控制这两种情况执行代码的过程。
在if __name__ == 'main': 下的代码只有在第一种情况下（即文件作为脚本直接执行）才会被执行
而 import 到其他脚本中是不会被执行的。
-----------------------------------------------------------
【需求三：创建多层文件夹（不验证是否有）】
上面的代码是为了在程序中显示是否已经运行过
一般自己用可以两行：
import os
Os.makedirs()
-----------------------------------------------------------
【需求四：从一个地方把文件复制到另一个地方】
import shutil
import os
os.makedirs('设立目标文件夹')
原地址='/Users/lifan/PycharmProjects/untitled3/diaoyong/2.py'
新地址='/Users/lifan/PycharmProjects/untitled3/复制文件'

要是自信，直接这一行就可以了
shutil.copy(原地址,新地址)
比如
shutil.copy('/Users/lifan/PycharmProjects/untitled3/diaoyong/pizza.py','/Users/lifan/PycharmProjects/untitled3/复制文件')
-----------------------------------------------------------
【需求五：查找某一文件，并输出其路径（最简单，glob）】
但是不查找下一级文件夹
要查找所有子文件夹，一定要加一句**/

import glob
import os
os.chdir('/Users/lifan/PycharmProjects/untitled3')
print(glob.glob('**/**2.txt',recursive=True))

glob(pathname, recursive=False)
第一个参数pathname为需要匹配的字符串。（该参数应尽量加上r前缀，以免发生不必要的错误）
第二个参数代表递归调用，与特殊通配符“**”一同使用，默认为False。
该函数返回一个符合条件的路径的字符串列表，如果使用的是Windows系统，路径上的“\”符号会自动加上转义符号变为“\\”（方便使用）。
在3.5版本之后，glob函数支持一个特殊的通配符“**”，该通配符可以匹配指定路径里所有文件和目录，包括子目录里的所有文件和目录。相当于递归地调用了这个函数。
使用这个通配符必须加上recursive=True参数。
（在有复杂目录结构的情况下使用该通配符可能会导致性能下降，拖累整个程序的运行，需谨慎使用！）
-----------------------------------------------------------
【需求五：查找某一文件，并输出其路径（最简单，glob）】
竖着打印的方式
import glob
import os
os.chdir('/Users/lifan/PycharmProjects/untitled3')
查找文件=glob.glob('**/**1.py',recursive=True)
for i in 查找文件:
    print(i)
-----------------------------------------------------------
【需求六、批量查找指定文件夹重复文件，hash判断是否实际内容重复，删除，或者移入制定文件，显示重复文件路径、名字等信息】
import os
列表=[]

for 文件夹路径,子文件夹列表,文件列表 in os.walk('/Users/lifan/Desktop/剑桥真题4-12（高清版）'):
    for 文件名 in os.scandir(文件夹路径):
        if 文件名.is_file():
            文件=open(文件名,'rb').read()
            if hash(文件) in 列表:
                # os.remove(文件名)
                print(文件名)
                lujin=os.path.abspath(文件名)  #获取当前路径  可以使文文件名
                print(lujin)
            else:
                列表.append(hash(文件))

-----------------------------------------------------------
【需求：查找某一文件，并输出其路径】
import os
列表=[]
for parent,dirnames,filenames in os.walk('/Users/lifan/PycharmProjects/untitled3'):
    for filename in filenames:
        if filename.endswith('1.py') :
            列表.append(filename)
            for i in 列表:
                print(os.path.join(parent,i))
                
                 #输出找到的文件目录
        #os.path.join——————拼接’文件夹路径+文件名字’路径
-----------------------------------------------------------
【需求：Xlsx写入行号和列号】
import pandas as pd
import numpy as np
import xlrd

路径=('/Users/lifan/Desktop/Pandas课件/课件/pandas教程/课件001-005/读取文件.xlsx')
读取数据=pd.read_excel(路径,header=0,index_col='序号')
读取数据.columns=['1','2','3','4','5']
读取数据.index=['q','j','u','y','t','r','w']
print(读取数据)

这里的结果是不改变原文件的，只是把数据读取出来再处理的
需要存储入原文件的，加一行读取数据.to_excel(路径)
-----------------------------------------------------------
【需求：查找文件名字中指定字符，并进行替换或者删除】
import re
import os
path=''
orignalname=''
replacename=''

def main1(path1):
    files=os.listdir(path1)      #files是path1下文件列表

    for file in files:
        if os.path.isdir(path1+'/'+file):       #isdir————判读是不是文件夹（可能是文件），是文件夹就继续来一遍这个函数
            main1(path1+'/'+file)
        else:
            file2=os.listdir(path1+'/')         #上一轮判断出来不是文件夹，说明直接是文件
            for file1 in file2:
                if orignalname in file1:           #然后开始准备替换字符
                 n=str(path1+'/'+file1.replace(orignalname,replacename))#新名字
                 n1=str(path1+'/'+str(file1))#旧名字

                 try:
                     os.rename(n1,n)
                 except IOError:
                     continue

main1(path)
-----------------------------------------------------------
【需求：查找文件夹（不查找文件名）指定字符并进行替换】
import re
import os

orignalname=''
replacename=''

for 文件夹路径,子文件夹列表,文件列表 in os.walk('/Volumes/笠桓/后期菌素材下载/ipod classic音乐/陈奕迅专缉'):
    for 子文件夹 in 子文件夹列表:
        if orignalname in 子文件夹:
            n=str('/Volumes/笠桓/后期菌素材下载/ipod classic音乐/陈奕迅专缉'+'/'+子文件夹.replace(orignalname,replacename))
            n1=str('/Volumes/笠桓/后期菌素材下载/ipod classic音乐/陈奕迅专缉'+'/'+str(子文件夹))
            os.rename(n1,n)
-----------------------------------------------------------
【需求：所有文件名称前面添加前缀】
import os
for 文件夹路径,子文件夹列表,文件列表 in os.walk('/Volumes/笠桓/后期菌素材下载/ipod classic音乐/久石让'):
    for 文件 in 文件列表:
        新名字=str('久石让')+文件
        os.rename(文件夹路径+'/'+文件,文件夹路径+'/'+新名字)
-----------------------------------------------------------
【需求：查找某一目录下某种文件（pdf），并将其全部复制到某处】
import os
import shutil
for parent,dirnames,filenames in os.walk('/Volumes/笠桓/后期菌素材下载/2020Java'):
    filenames[:] = [f for f in filenames if f.endswith(".pdf")]
    for filename in filenames:
        #输出找到的文件目录
        #os.path.join——————拼接’文件夹路径+文件名字’路径
        print(os.path.join(parent,filename))
        shutil.copy(os.path.join(parent,filename),'/Users/lifan/Desktop/java-pdf')


-----------------------------------------------------------
