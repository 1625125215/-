题目
代码

题目：有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？
#(1)
计数器=0
for i in range(1,5):
    for j in range (1,5):
        for k in range(1,5):
            if (i!=j) and (j!=k) and (i!=k):
                计数器+=1
                print(i,j,k)
print('-----------------')
print(计数器)
#程序分析：可填在百位、十位、个位的数字都是1、2、3、4。组成所有的排列后再去 掉不满足条件的排列。
#对比答案，我加了一个计数器功能
===============================================================================================================
题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；
利润高于10万元，低于20万元时，低于10万元的部分按10%提成，
高于10万元的部分，可提成7.5%；20万到40万之间时，
高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；
60万到100万之间时，高于60万元的部分，可提成1.5%，
高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？

i=int(input('请输入利润：'))
arr=[1000000,600000,400000,200000,100000,0]
rat=[0.01,0.015,0.03,0.05,0.075,0.1]
r=0        #r是奖金总数
for idx in range(0,6):      
    if i>arr[idx]:          #arr[1]到arr[6]，就是arr列表里的六个数据进行循环
                            # 必须得是i大于arr【idx】，arr【idx】是缴税的标准线
                              把idx分为六部分，分别计算
        r+=(i-arr[idx])*rat[idx]        #r=（利润-缴税标准线）x对应的税率
        print((i-arr[idx])*rat[idx])            #记得外面加括号
        i=arr[idx]         
print(r)
# i本来是所有利润，循环第一次后，计算完第一部分最高部分的税率
#来到计算第二部分，此时i是10000元（一万元以上的利润已经被计算好了）
===============================================================================================================
一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？
#%是取余数
import math
#利用math模块
for i in range(1000):
    x = math.sqrt(i + 100)
    y = math.sqrt(i + 100 + 168)
    if x % 1 == 0 and y % 1 == 0:
        print(i)
===============================================================================================================
输入某年某月某日，判断这一天是这一年的第几天？
'''
  【个人备注】：知道python有时间元组这一概念，这道题完全不需要计算。
  时间元组包含九个属性
  tm_year   年
  tm_mon   月(1~12)
  tm_mday   日(1~31)
  tm_hour   时(0~23)
  tm_min   分(0~59)
  tm_sec   秒(0~61, 60或61是闰秒)
  tm_wday   星期(0~6, 0是周一)
  tm_yday   第几天(1~366, 366是儒略历)
  tm_isdst  夏令时(平时用不到)
  
'''
import time
date=input('请以xxxx-xx-xx的形式输入时间：')
st=time.strptime(date,'%Y-%m-%d')       #时间文本转化为时间元组
#%Y 带世纪部分的十制年份
num=st.tm_yday
print(num)

#Python time strptime() 函数根据指定的格式把一个时间字符串解析为时间元组。
语法
strptime()方法语法：
time.strptime(string[, format])
参数
string -- 时间字符串。
format -- 格式化字符串。
返回值
返回struct_time对象。
说明
python中时间日期格式化符号：
%y 两位数的年份表示（00-99）
%Y 四位数的年份表示（000-9999）
%m 月份（01-12）
%d 月内中的一天（0-31）
%H 24小时制小时数（0-23）
%I 12小时制小时数（01-12）
%M 分钟数（00-59）
%S 秒（00-59）
%a 本地简化星期名称
%A 本地完整星期名称
%b 本地简化的月份名称
%B 本地完整的月份名称
%c 本地相应的日期表示和时间表示
%j 年内的一天（001-366）
%p 本地A.M.或P.M.的等价符
%U 一年中的星期数（00-53）星期天为星期的开始
%w 星期（0-6），星期天为 0，星期一为 1，以此类推。
%W 一年中的星期数（00-53）星期一为星期的开始
%x 本地相应的日期表示
%X 本地相应的时间表示
%Z 当前时区的名称
%% %号本身
===============================================================================================================
输入三个整数x,y,z，请把这三个数由小到大输出。
print('输入3个数字')
x = input('输入第1个数字:')
y = input('输入第2个数字:')
z = input('输入第3个数字:')
l=[x,y,z]
list.sort(l)           #也可以直接写print（sorted（l））
print(l)
===============================================================================================================
输出十个斐波那契数列

'''
程序分析：斐波那契数列，又称黄金分割数列，指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、……。
        使用递归
'''
def fib(n):
    if n == 1 or n == 2:     #如果是第一第二个数，那么得到的结果还是1，否则就是去循环前两个数
        return 1
    return fib(n - 1) + fib(n - 2)
# 输出了第10个斐波那契数列
print(fib(10))
=============================================================================================================== 
题目：将一个列表的数据复制到另一个列表中。
程序分析：使用列表[:]。
'''
 【个人备注】：如果系统的看过python教程之类的应该都知道。
 Python里面一切都是对象，list的复制需要用[:]的方式。
 至于b=a只是相当于给a取了个别名而已，指向的是同一个列表，并没有实现复制。
 '''
a=[1,2,3]
b=a[:]
print (b)
=============================================================================================================== 
输出 9*9 乘法口诀表。
#(8)
'''
d和s（d是整型）
%2s意思是字符串长度为2，当原字符串的长度超过2时，按原长度打印
%7s意思是字符串长度为7，当原字符串的长度小于7时，在原字符串左侧补空格
-7s意思是字符串长度为7，当原字符串的长度小于7时，在原字符串右侧补空格
'''
for i in range (1,10):      #左开右闭
    for j in range(1,i+1):
        print(f'{j}x{i}={i*j}',end='\t’)      #\t是制表符，表示后面跟一个空格
                                                   #注意：f’’是格式化输出，比%d更加直观
    print('')
===============================================================================================================
暂停一秒输出
#(9)
'''
  【个人备注】：time.sleep()，用过的都知道。
'''
import time
a=time.time()
print(a)
time.sleep(1)
b=time.time()
print(b-a)

暂停一秒输出，并格式化当前时间
=============================================================================================================== 

古典问题：
有一对兔子，
从出生后第3个月起每个月都生一对兔子，
小兔子长到第三个月后每个月又生一对兔子。
假如兔子都不死。
问每个月的兔子总数为多少？
===============================================================================================================

'''
题目：判断101-200之间有多少个素数，并输出所有素数。
程序分析：判断素数的方法:
用一个数分别去除2到sqrt(这个数)，如果能被整除，则表明此数不是素数，反之是素数。 　
'''
l=[]
for i in range (101,201):
    for j in range(2,i-1):
        if i %j==0:
            break
    else:
        l.append(i)
print(l)
print(f'总数为：{len(l)}')
===============================================================================================================
实例013：所有水仙花数

题目： 打印出所有的"水仙花数"，所谓"水仙花数"是指一个三位数，其各位数字立方和等于该数本身。
例如：153是一个"水仙花数"，因为153=1的三次方＋5的三次方＋3的三次方。
程序分析： 利用for循环控制100-999个数，每个数分解出个位，十位，百位。
把这个数先字符化，然后截取个十百千万，再int该字符串
for i in range (100,1000):
    s=str(i)
    one=int(s[-1])
    ten=int(s[-2])
    hun=int(s[-3])
    if i==one**3+ten**3+hun**3:
        print(i)
===============================================================================================================
实例014：分解质因数

题目： 将一个整数分解质因数。例如：输入90,打印出90=233*5。
程序分析： 根本不需要判断是否是质数，从2开始向数本身遍历，能整除的肯定是最小的质数。
target=int(input('请输入一个整数：'))
print(target,'=',end='')
#遇到负数如何分解，需要求绝对值
if target<0:
    target=abs(target)
    print('-1*',end='')
flag=0          #程序中喜欢用 flag 等于几，表示特定的状态，此处0表示还没整除，1表示已经整除完毕
if target<=1:
    print(target)
    flag=1
while True:
    if flag:
        break
    for i in range (2,int(target+1)):       #2以后开始，到目标数多1
        if target%i==0:                     #逐个去除，能够整除
            print(f'{i}',end='')            #遇到能够整除的i，就输出i
            if target==i:                   #已经除到自己了
                flag=1
                break
            print('*',end='')
            target=target/i                 #可以写成target/=i
            break

===============================================================================================================
实例015：分数归档

题目： 利用条件运算符的嵌套来完成此题：学习成绩>=90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。
程序分析： 用条件判断即可。
#（15）
points=int(input('请输入您的成绩：'))

if points>=90:
    grade='a'

elif points<=60:
    grade='c'

else:
    grade='b'

print(grade)

实例016：输出日期

题目： 输出指定格式的日期。
程序分析： 使用 datetime 模块。
import datetime
print(datetime.date.today())        #datetime.time.today()————输出今天时间
print(datetime.date(2333,2,3))      #datetime.date(a,b,c)————按照年月日进行输出
print(datetime.date.today().strftime('%d/%m/%Y'))   #strftime('%d%m%Y)————排列年月日顺序
day=datetime.date(1111,2,3)
day=day.replace(year=day.year+22)
print(day)


实例017：字符串构成

题目： 输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。
程序分析： 利用 while 或 for 语句,条件为输入的字符不为 ‘\n’。
#（17）
string=input("输入字符串：")

alp=0
num=0
spa=0
other=0

for i in range(len(string)):
    if string[i].isspace():     #Python isspace() 方法检测字符串是否只由空格组成。
        spa+=1
    elif string[i].isdigit():
        num+=1
    elif string[i].isalpha():
        alp+=1
    else:
        other+=1
print('空格：',spa)
print('数字: ',num)
print('字母: ',alp)
print('其他: ',other)

实例018：复读机相加

题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加由键盘控制。
程序分析： 用字符串解决。
#（18）
a=input('被加数字：')
n=int(input("加几次："))
res=0

for i in range (n):         #i在加了几次里循环，比如加十次，第一轮循环1
    res=res+int(a)          #第一轮结果=9
    a=a+a[0]                #a等于99，这是直接字符串相加，不是int
print('结果是：',res)
# a=input('xxx:')     #a需要是字符或者直接str（）
a=str(9)
a=a+a[0]
print(a)
实例019：完数

题目： 一个数如果恰好等于它的因子之和，这个数就称为"完数"。例如6=1＋2＋3.编程找出1000以内的所有完数。
程序分析： 将每一对因子加进集合，在这个过程中已经自动去重。最后的结果要求不计算其本身。
def factor(num):
    target=int(num)
    res=set()

    '''
    #set是直接创建集合。
    # set('boy')
      set(['y', 'b', 'o'])
      set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。
    '''

    for i in range(1,num):
        if num % i ==0:
            res.add(i)
            res.add(num/i)      #将两个因子都加进集合，且set（）是自动去重的
    return res

#这个factor函数是将数字num分解因数，并将因数放入集合

for i in range (2,1001):
    if i ==sum(factor(i))-i:        #计算数字是否等于所有因子之和，但是sum（）里面还算了i它自己，所以要减去
        print(i)

实例020：高空抛物
题目： 一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？
#（20）
high=200
total=100
for i in range(10):     #等于（0，10）左闭右开，因此是0，1，2....,8,9
    high/=2
    total+=high
    print(high/2)
print('总长：',total)

实例021：猴子偷桃

题目 猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。
程序分析 按规则反向推断：猴子有一个桃子，他偷来一个桃子，觉得不够又偷来了与手上等量的桃子，一共偷了9天。
#（21）
peach=1
for i in range (9):
    peach=(peach+1)*2
print(peach)

实例022：比赛对手

题目 两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。
程序分析 找到条件下不重复的三个对手即可。
#(22)
a=set(['x','y','z'])        #set设置一个无序的不重合元素集
b=set(['x','y','z'])
c=set(['x','y','z'])

c=c-set(['x','z'])      #c不和x，z比
a=a-set(['x'])          #a不和x比

for i in a:
    for j in b:
        for k in c:
            if len(set((i,j,k)))==3:        #i，j，k都满足的时候（都能找到一个对应的值时），长度就是3
                print('a:%s,b:%s,c:%s'%(i,j,k))     #前面""里有几个%s，后面%（）里放几个元素，然后一一对应

实例023：画菱形

题目 打印出如下图案（菱形）:
    *

   ***

  *****

 *******

  *****

   ***

    *

#（23）
#1，3，5，7
def draw(num):              #num表示到最长那一行有几行
    a='*'*(2*(4-num)+1)        #
    print(a.center(9,' '))      #center的用法：a居中，宽度为9个字符，两边不足的用''内的单个字符补足
    if num!=1:
        draw(num-1)         #一开始num一个循环，然后减去1再循环，直到0
        print(a.center(9,' '))
draw(4)
描述
Python center() 返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。默认填充字符为空格。
语法
center()方法语法：
str.center(width[, fillchar])
参数
width -- 字符串的总宽度。
fillchar -- 填充字符。
返回值
该方法返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。
实例
以下实例展示了center()方法的实例：
>>>str = 'runoob'>>> str.center(20, '*')'*******runoob*******'>>> str.center(20)' runoob '>>>
实例024：斐波那契数列II

题目 有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13…求出这个数列的前20项之和。
程序分析 就是斐波那契数列的后一项除以前一项。
#（24）
a=2.0
b=1.0
s=0

for n in range(1,21):
    s+=a/b
    c=a             #也可以不引入c，直接 a,b = a + b,a，此时b=a的时候，值还都是原来的值
    a=a+b
    b=c
print(s)

实例025： 阶乘求和

题目 求1+2!+3!+…+20!的和。
程序分析 1+2!+3!+…+20!=1+2(1+3(1+4(…20(1))))
res=1
for i in range(20,1,-1):
    res=i*res+1
print(res)


实例026：递归求阶乘

题目 利用递归方法求5!。
程序分析 递归调用即可。
def factorial(n):
    return n*factorial(n-1) if n>1 else 1
print(factorial(5))


实例026：递归求阶乘

题目 利用递归方法求5!。
程序分析 递归调用即可。
def factorial(n):
    if n >1:
        return n*factorial(n-1)
    else:
        return 1
print(factorial(5))
def factorial(n):
    return n*factorial(n-1) if n>1 else 1
print(factorial(5))

实例027：递归输出

题目 利用递归函数调用方式，将所输入的5个字符，以相反顺序打印出来。
程序分析 递归真是蠢方法。

递归是自动循环的，不满足条件就一直循环下去，不用单独写
def rec(string):
    if len(string)!=1:
        rec(string[1:])
    print(string[0],end='')

rec(input('string here:'))

计算1到100之间相加之和；通过循环和递归两种方式实现

# 循环方式 
def sum_cycle(n): 
    sum = 0 
    for i in range(1,n+1) : 
        sum += i print(sum)
 
# 递归方式 
def sum_recu(n): 
    if n>0: 
       return n +sum_recu(n-1) 
    else: 
       return 0 
 
sum_cycle(100) 
sum = sum_recu(100) print(sum)
实例028：递归求等差数列

题目 有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？
#（28）
def age(n):         #n是第几个人，是倒序，从第五个人开始计算
    if n==1:        
        return 10
    return 2+age(n-1)   #age（n-1）是第四个人
print(age(5))

实例029：反向输出

题目 给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。
程序分析 学会分解出每一位数,用字符串的方法总是比较省事。
#（29）
n=int(input('请输入一个正整数：'))
n=str(n)
print('%d位数'%len(n))        #与前面题目里%s相联系，要len的对象必须是字符串形式
print(n[::-1])
import numpy as np
a=[1,2,3.4,5]
print(a)
[ 1 2 3 4 5 ]
 
print(a[-1]) ###取最后一个元素
[5]
 
print(a[:-1])  ### 除了最后一个取全部
[ 1 2 3 4 ]
 
print(a[::-1]) ### 取从后向前（相反）的元素
[ 5 4 3 2 1 ]
 
print(a[2::-1]) ### 取从下标为2的元素翻转读取
[ 3 2 1 ]
实例030：回文数

题目 一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。
程序分析 用字符串比较方便,就算输入的不是数字都ok。
#(30)
n=input('输入内容：')
a=0
b=len(n)-1      #a和b是用在后面标示第几位数字用的，n【b】标示最后一位数字（因为有第0位，但光是b就是几位字符减1）
flag=True

while a<b:      #确定a是前半段，b是后半段
    if n[a]!=n[b]:      #第一位数字  不等于  最后一位数字
        print('不是回文数')  #就不可能是回文数
        flag=False
        break
    a,b=a+1,b-1     #开始计算第2位数字
    
if flag:
    print('是回文数。')

实例031：字母识词

题目 请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。
程序分析 这里用字典的形式直接将对照关系存好。
weekT={'h':'thursday',
       'u':'tuesday'}
weekS={'a':'saturday',
       'u':'sunday'}
week={'t':weekT,
      's':weekS,
      'm':'monday',
      'w':'wensday',
      'f':'friday'}
a=week[str(input('请输入第一位字母:')).lower()]
if a==weekT or a==weekS:
    print(a[str(input('请输入第二位字母:')).lower()])
else:
    print(a)


描述
Python lower() 方法转换字符串中所有大写字符为小写。
语法
lower()方法语法：
str.lower()
实例032：反向输出II

题目 按相反的顺序输出列表的值。

a = ['one', 'two', 'three']
print(a[::-1])


实例033：列表转字符串


L = [1,2,3,4,5]
print(','.join(str(n) for n in L))

#a.join(b)
将b的内容，以a为间隔进行连接
描述
Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。
语法
join()方法语法：
str.join(sequence)
参数
sequence -- 要连接的元素序列。
返回值
返回通过指定字符连接序列中元素后生成的新字符串。
实例
以下实例展示了join()的使用方法：
实例(Python 2.0+)

#!/usr/bin/python# -*- coding: UTF-8 -*- str = "-"; seq = ("a", "b", "c"); # 字符串序列print str.join( seq );
以上实例输出结果如下：
a-b-c
实例034：调用函数

题目 练习函数调用。
程序分析 无。
def hello():
    print('Hello World!')
def helloAgain():
    for i in range(2):
        hello()

if __name__=='__main__’:      #代码入口在此——这是“if __name__==’__main__:”这条代码的意义之一。
    helloAgain()

实例036：算素数

题目 求100之内的素数。
程序分析 用else执行for循环的奖励代码（如果for是正常完结，非break）。
a=int(input('下限：'))
b=int(input('上限:'))

for i in range (a,b+1):         #取素数的范围
    if i>=1:                    #素数是大于等于1的
        for j in range (2,i):       #j是在轮这个素数的因子，从2开始到该数本身
            if (i%j)==0:            #其中但凡有一个数j能整除，就不算素数
                break
        else:
            print(i)

实例037：排序


题目 对10个数进行排序。

raw=[]
for i in range (10):            #循环运行10次，i是计数器
    x=int(input('int%d:'%(i)))
    raw.append(x)               #把十个数字都加入到raw这个序列当中

for i in range(len(raw)):           #i还是计数器，次数等于raw里元素的个数
    for j in range (i,len(raw)):        #j是raw【i】之后的那部分
        if raw[i]>raw[j]:               #raw[i]大于raw[j]的时候，就调换位置，把小的放在前面
            raw[i],raw[j]=raw[j],raw[i]
print(raw)

实例038：矩阵对角线之和

题目 求一个3*3矩阵主对角线元素之和。
mat=[[1,2,3],
     [3,4,5],
     [4,5,6]
    ]
res=0
for i in range(len(mat)):
    res+=mat[i][i]
print(res)


实例039：有序列表插入元素

题目 有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。
程序分析 首先判断此数是否大于最后一个数，然后再考虑插入中间的数的情况，插入后此元素之后的数，依次后移一个位置。
#（39）
list=[1,10,100,1000,10000,100000]
n=int(input('插入数字：'))
list.append(n)

for i in range (len(list)-1):               #range(10)就是从0到9，range(1,11)就是1到10（不含11）
                                            #本题range（7-1），就是i在0，1，2，3，4，5
    if list[i]>=n:                          #list里第一个数list【0】比插入的数大
                                #本题中list【4】为10000，大于5763，此时数列[1,10,100,1000,10000,100000，n]
        for j in range (i,len(list)):       #j的range（4，7），是4，5，6
            list[j],list[-1]=list[-1],list[j]   #list[-1]代表最后一个数，就是把后面的数字都逐个对调到前面来，不用额外的判断
        break
print(list)

实例040：逆序列表

题目 将一个数组逆序输出。
程序分析 依次交换位置，或者直接调用reverse方法。
##（40）
list=[1,10,100,1000,10000,100000]
for i in range (int(len(list)/2)):          #两两对调即可，因此range（3）：0，1，2，对调3次即可
    list[i],list[len(list)-1-i]=list[len(list)-1-i],list[i]     #一头一尾进行对调

print('第一种实现：')
print(list)


lis=[1,10,100,1000,10000,100000]
print('第二种实现：')
lis.reverse()
print(lis)


实例041：类的方法与变量

题目 模仿静态变量的用法。
程序分析 构造类，了解类的方法与变量。
def dummy():
    i=0
    print(i)
    i+=1

class cls:
    i=0
    def dummy(self):
        print(self.i)
        self.i+=1

a=cls()
for i in range(50):
    dummy()
    a.dummy()


实例042：变量作用域

题目 学习使用auto定义变量的用法。
程序分析 python中的变量作用域。
i=0
n=0
def dummy():
    i=0
    print(i)
    i+=1
def dummy2():
    global n
    print(n)
    n+=1
print('函数内部的同名变量')
for j in range(20):
    print(i)
    dummy()
    i+=1
print('global声明同名变量')
for k in range(20):
    print(n)
    dummy2()
    n+=10


实例043：作用域、类的方法与变量

题目 模仿静态变量(static)另一案例。
程序分析 综合实例041和实例042。
#(43)
class dummy:
    num=1
    def Num(self):
        print('class dummy num:', self.num)     #self.num不管外面传进来什么num，这里的num只跟着类里面的走
        print('global num: ',num)               #这个num跟着外面传进来的走
        print('------------')
        self.num+=1

n=dummy()
num=1
for i in range (5):
    num*=10
    n.Num()
变量作用域

一个程序的所有变量并不是在哪个位置都可以访问的。访问权限取决于这个变量是在哪里赋值的。
变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。
如下为两种最基本的变量的作用域：
全局变量
局部变量
定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。
局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。
举例：
num = 0 #全局变量
def sum(arg1,arg2):
#返回两个参数的和
num = arg1 + arg2 #num在这里是局部变量
print('局部变量：',num)
return num
sum(10,5)
print('全局变量：',num)
执行结果：
局部变量： 15
全局变量： 0
python中的作用域分4种情况
L：local，局部作用域，即函数中定义的变量；
E：enclosing，嵌套的父级函数的局部作用域，即包含此函数的上级函数的局部作用域，但不是全局的；
G：globa，全局变量，就是模块级别定义的变量；
B：built-in，系统固定模块里面的变量，比如int, bytearray等。 搜索变量的优先级顺序依次是：作用域局部>外层作用域>当前模块中的全局>python内置作用域，也就是LEGB。
x = int(3.9) #int built-inf ,系统固定模块里面的变量；
g_count = 10 #globa,全局变量；
def outer():
e_count = 1 #enclosing,包含此函数的上级函数的局部作用域，但不是全局；
def inner():
l_count = 2 #local,局部作用域，函数中定义的变量；
print(o_count)
inner()
outer()
local和enclosing是相对的，enclosing变量相对上层来说也是local；
作用域产生
在Python中，只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如if、try、for等）是不会引入新的作用域的，如下代码，if并没有引入一个新的作用域，x仍处在当前作用域中，后面代码可以使用：
if 2>1:
x = 1
print(x) #结果为 1
def、class、lambda是可以引入新作用域的：
def test():
x = 2
print(x) #NameError: name 'x' is not defined
global关键字
当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了，当修改的变量是在全局作用域（global作用域）上的，就要使用global先声明一下，代码如下：
count = 20
def outer():
global count
print(count)
count = 200
print(count)
outer()
执行结果：
20
200
nonlocal关键字 
global关键字声明的变量必须在全局作用域上，不能嵌套作用域上，当要修改嵌套作用域（enclosing作用域，外层非全局作用域）中的变量就需要nonlocal关键字了：
def outer():
num = 20
def inner():
nonlocal num
num = 100
print(num)
inner()
print(num)
outer()
执行结果：
100
100
总结：
（1）变量查找顺序：LEGB，作用域局部>外层作用域>当前模块中的全局>python内置作用域；
（2）只有模块、类、及函数才能引入新作用域；
（3）对于一个变量，内部作用域先声明就会覆盖外部变量，不声明直接使用，就会使用外部作用域的变量；
（4）内部作用域要修改外部作用域变量的值时，全局变量要使用global关键字，嵌套作用域变量要使用nonlocal关键字。nonlocal是python3新增的关键字，有了这个 关键字，就能完美的实现闭包了。 
实例044：矩阵相加

题目 计算两个矩阵相加。
程序分析 创建一个新的矩阵，使用 for 迭代并取出 X 和 Y 矩阵中对应位置的值，相加后放到新矩阵的对应位置中。

Len矩阵就是算行数
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]
 
Y = [[5,8,1],
    [6,7,3],
    [4,5,9]]
 
res=[[0,0,0],
    [0,0,0],
    [0,0,0]]
for i in range(len(res)):
    for j in range(len(res[0])):
        res[i][j]=X[i][j]+Y[i][j]
print(res)


输出矩阵列数

import numpy as np
x = np.array([[1,2,5],[2,3,5],[3,4,5],[2,3,6]])
# 输出数组的行和列数
print(x.shape) # (4, 3)
# 只输出行数
print(x.shape[0]) # 4
# 只输出列数
print (x.shape[1]) # 3
实例045：求和

题目 统计 1 到 100 之和。
res=0
for i in range(1,101):
    res+=i
print(res)


实例046：打破循环

题目 求输入数字的平方，如果平方运算后小于 50 则退出。
while True:
    try:
        n=float(input('输入一个数字：'))
    except:
        print('输入错误')
        continue
    dn=n**2
    print('其平方为：',dn)
    if dn<50:
        print('平方小于50，退出')
        break


实例047：函数交换变量

题目 两个变量值用函数互换。
def exc(a,b):
    return (b,a)
a=0
b=10
a,b=exc(a,b)
print(a,b)


实例048：数字比大小

题目 数字比较。
程序分析 无
a=int(input('a='))
b=int(input('b='))
if a<b:
    print('a<b')
elif a>b:
    print('a>b')
else:
    print('a=b')


实例049：lambda

题目 使用lambda来创建匿名函数。
Max=lambda x,y:x*(x>=y)+y*(y>x)
Min=lambda x,y:x*(x<=y)+y*(y<x)

a=int(input('1:'))
b=int(input('2:'))

print(Max(a,b))
print(Min(a,b))


实例050：随机数

题目 输出一个随机数。
程序分析 使用 random 模块。
import random
print(random.uniform(10,20))


实例062：查找字符串

题目 查找字符串。
#(62)
s1='asdasdadadadadasa'
s2='as'
s3='da'
print(s1.find(s2))
print(s1.find(s3))

找出来的是能匹配多少个
实例066：三数排序

题目 输入3个数a,b,c，按大小顺序输出。
程序分析 同实例005。
#66

#写法1
# raw=[]
# for i in range (3):         #0,1,2
#     x=int(input('int%d:'%(i)))
#     raw.append(x)       #循环三次，输入三个数字
#
# for i in range (len(raw)):      #几个数，循环几次，比较三次
#     for j in range (i,len(raw)):        #比如第二次循环，i=1，j就是1，2，比较
#         if raw[i]>raw[j]:           #raw[i]是前面的数，raw[j]是后面的数
#             raw[i],raw[j]=raw[j],raw[i]         #交换位置，把j换到前面来
# print(raw)

# #写法2
# raw2=[]
# for i in range(3):
#     x=int(input('int%d: '%(i)))
#     raw2.append(x)
# print(sorted(raw2))

实例067：交换位置

题目 输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。
程序分析 无。

index方法和find差不多，返回的是匹配的那个值的索引值
# #67
# li=[3,5,66,878,5433,2344,354,4,5,6]
# li[-1],li[li.index(min(li))]=li[li.index(min(li))],li[-1]       #li.index(min(li))____返回的是最小的那个值对应的序号
#
# m=li[0]
#
# ind=li.index(max(li))
# li[0]=li[ind]
#
# li[ind]=m
# print(li)
Python index() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法一样，只不过如果str不在 string中会报一个异常。
实例069：报数

题目 有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。
#69
if __name__=='__main__':
    nmax=50
    n=int(input('总人数：'))
    num=[]
    for i in range (n):
        num.append(i+1)         #循环人数个次数，就是在给这些人编号

    i=0     #计数
    k=0        #k报数：1，2，3
    m=0         #m记录退出圈子的人数

    while m <n-1:       #退出的人数必然小于总人数（留下的人数至少一个人，不成立时程序结束）
        if num[i]!=0:k+=1       #编号不是0，就加1
        if k ==3:           #加到3之后，就清零
            num[i]=0
            k=0
            m+=1            #退出的人数加1
        i+=1                #开始下一个数字
        if i ==n:i=0        #到最后一个数了
    i=0
    while num[i]==0:i+=1
    print(num[i])


实例076：做函数

题目 编写一个函数，输入n为偶数时，调用函数求1/2+1/4+…+1/n,当输入n为奇数时，调用函数1/1+1/3+…+1/n
#76
'''
实例076：做函数
题目 编写一个函数，输入n为偶数时，调用函数求1/2+1/4+…+1/n,当输入n为奇数时，调用函数1/1+1/3+…+1/n
'''

def peven(n):
    i=0
    s=0.0
    for i in range(2,n+1,2):            #从2开始，步长为2，就是偶数
        s=s+1.0/i
    return s

def podd(n):
    s=0.0
    for i in range (1,n+1,2):           #从1开始，步长为1，就是奇数
        s+=1.0/i
    return s

def dcall(fp,n):
    s=fp(n)         #选择调用哪个函数
    return s

if __name__=='__main__':
    n=int(input('请输入一个数字：'))
    if n %2==0:
        sum=dcall(peven,n)
    else:
        sum=dcall(podd,n)
    print(sum)

实例077：遍历列表

题目 循环输出列表
l=['moyu','niupi','xuecaibichi','shengfaji','42']
for i in range(len(l)):
    print(l[i])


实例080：猴子分桃

题目 海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？
if __name__ == '__main__':
    i = 0
    j = 1
    x = 0
    while (i < 5) :
        x = 4 * j
        for i in range(0,5) :
            if(x%4 != 0) :
                break
            else :
                i += 1
            x = (x/4) * 5 +1
        j += 1
    print(x)

    for p in range(5):
        x=(x-1)/5*4
    print(x)


实例084：连接字符串

题目 连接字符串。
delimiter = ','
mylist = ['Brazil', 'Russia', 'India', 'China']
print(delimiter.join(mylist))


实例086：连接字符串II

题目 两个字符串连接程序。
程序分析 无。
a='guangtou'
b='feipang'
print(b+a)


实例087：访问类成员

题目 回答结果（结构体变量传递）。
程序分析 无。
if __name__ == '__main__':
    class student:
        x = 0
        c = 0
    def f(stu):
        stu.x = 20
        stu.c = 'c'
    a= student()
    a.x = 3
    a.c = 'a'
    f(a)
    print(a.x,a.c)


实例088：打印星号

题目 读取7个数（1—50）的整数值，每读取一个值，程序打印出该值个数的＊。
程序分析 无。
for i in range(3):
    print('*'*int(input('input a number: ')))


实例089：解码

题目 某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。

 %s,表示格式化一个对象为字符
#89
n=input('数据：')
n=str(n)
a=[]

for  i in range (4):            #循环三次
    a.append((int(n[i])+5)%10)      #把四个数字处理好以后，加入a的数列里
a[0],a[3]=a[3],a[0]                 #交换位置
a[1],a[2]=a[2],a[1]

print(''.join('%s' %s for s in a))

实例096：计算复读次数

题目 计算字符串中子串出现的次数。
程序分析 无。
s1='xuebixuebixuebixuebixuebixuebixuebixue'
s2='xuebi'
print(s1.count(s2))







